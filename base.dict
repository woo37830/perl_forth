: new dup . ;
: ( RT_PAREN token drop2 ;
: (.") QUOTE token ;
: 1+  1  + ;
: 2+ 2 + ;
: 3+ 3 + ;
: - minus + ;
: 1- 1 - ;
: 2- 2 - ;
: BACK HERE - , ;
: BEGIN ?comp HERE 1 ; immediate
: ENDIF ?comp 2 ?pairs HERE over - swap ! ; immediate
: THEN [compile] ENDIF ; immediate
: DO compile (do) HERE 3 ; immediate
: LOOP 3 ?pairs compile (loop) BACK ; immediate
: +LOOP 3 ?pairs compile (+loop) BACK ; immediate
: I R> R swap >R ;
: UNTIL 1 ?pairs compile 0BRANCH BACK ; immediate
: AGAIN 1 ?pairs compile BRANCH BACK ; immediate
: END [compile] UNTIL ; immediate
: REPEAT >R >R [compile] AGAIN R> R> 2- [compile] ENDIF ; immediate
: IF compile 0= compile 0BRANCH HERE 0 , 2  ; immediate
: ELSE 2 ?pairs compile BRANCH HERE 0 , swap 2 [compile] ENDIF 2 ; immediate
: WHILE [compile] IF 2+ ; immediate
: LEAVE R> drop R R> ;
: complex <builds , , does> dup 1+ ;
: vocabulary <builds [compile] immediate ENTRY LAST @ 3 + ! LAST @ 3 + CURRENT ! does> CONTEXT ! ;
: ?CURRENT CURRENT @ 3 - @ type ASPACE type ;
: ?CONTEXT CONTEXT @ 3 - @ type ASPACE type ;
: DEFINITIONS CONTEXT @ CURRENT ! ;
: word ASPACE token drop2 ;
: FORGET CURRENT @ CONTEXT ! word ?search IF dup 1+ @ CURRENT @ ! DP ! ELSE question THEN ;
: ? @ . ;
: ." (.") drop compile literal , compile type  ; immediate
: < swap > ;
: min over over < IF swap ENDIF drop ;
: max over over > IF swap ENDIF drop ;
: space ASPACE type ;
: spaces 0 max -dup IF 1 DO space LOOP ENDIF ;
: ". (.") drop type cr ;
". Finished Loading Basic Functions"
;S
